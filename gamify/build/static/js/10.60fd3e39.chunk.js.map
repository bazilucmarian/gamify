{"version":3,"sources":["assets/imgs/Empty.svg","assets/imgs/no-image.png","components/empty-placeholder.js","constants/messages.js","hooks/use-form.js","components/input.js","assets/imgs/logo.png","utils/form-rules-register.js","components/login-form.js","hooks/mutations/use-login-mutation.js","pages/user-pages/login-page.js"],"names":["EmptyPlaceholder","message","pathRedirect","image","history","useHistory","className","src","alt","color","variant","size","onClick","push","NoImage","defaultProps","Empty","emptyMessage","overviewPage","challengesPage","shopPage","shopPageAdmin","validationPage","welcome","notFound","useForm","initialState","currentState","onSubmitCallback","validate","useState","fields","setFields","errors","setErrors","isSubmitting","setIsSubmitting","resetForm","useCallback","useEffect","Object","keys","length","handleChange","e","fieldName","fieldValue","value","target","id","type","Number","prevState","handleSubmit","preventDefault","Input","inputId","inputType","inputValue","inputOnChange","inputLabel","error","isRequired","multiple","onDone","base64","file","url","name","htmlFor","onChange","required","placeholder","validateRegisterForm","LoginForm","onSubmit","aria-busy","style","textAlign","marginBottom","email","password","useLoginMutation","signIn","useAuth","updateUser","useUser","useMutation","loginFields","onSuccess","data","toast","success","onError","response","emptyState","LoginPage","loginHandler","mutate","Logo"],"mappings":"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","file":"static/js/10.60fd3e39.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Empty.7e4b6dae.svg\";","export default __webpack_public_path__ + \"static/media/no-image.0b19f0b7.png\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport Empty from '../assets/imgs/Empty.svg';\r\nimport NoImage from '../assets/imgs/no-image.png';\r\n\r\nimport Button from './button';\r\n\r\nfunction EmptyPlaceholder({message, pathRedirect, image}) {\r\n  const history = useHistory();\r\n\r\n  const handleRedirect = () => {\r\n    history.push(pathRedirect);\r\n  };\r\n\r\n  if (!message) {\r\n    return <img className=\"empty-placeholder__not-available\" src={NoImage} alt=\"placeholder\" />;\r\n  }\r\n  return (\r\n    <div className=\"empty-placeholder\">\r\n      <div className=\"empty-placeholder__content\">\r\n        <img className=\"empty-placeholder__image\" src={image} alt=\"placeholder-img\" />\r\n        <p className=\"empty-placeholder__message\">{message}</p>\r\n        {pathRedirect && (\r\n          <Button color=\"secondary\" variant=\"outlined-secondary\" size=\"lg\" onClick={handleRedirect}>\r\n            Go to available challenges ➡\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nEmptyPlaceholder.propTypes = {\r\n  message: PropTypes.string,\r\n  pathRedirect: PropTypes.string,\r\n  image: PropTypes.string\r\n};\r\nEmptyPlaceholder.defaultProps = {\r\n  message: '',\r\n  pathRedirect: '',\r\n  image: Empty\r\n};\r\n\r\nexport default EmptyPlaceholder;\r\n","export const emptyMessage = {\r\n  overviewPage: 'Sorry... You have no challenge in progress or completed 😔',\r\n  challengesPage: 'Sorry... You have no challenge available 😔',\r\n  shopPage: 'Sorry... You have no challenge available 😔',\r\n  shopPageAdmin: 'Oups...you have to add some products, for that press add new button',\r\n  validationPage: 'Oups... you have no challenge to validate.',\r\n  welcome: 'Welcome to Gamify',\r\n  notFound: 'Page not found 😓'\r\n};\r\n","import {useCallback, useEffect, useState} from 'react';\r\n\r\nexport const useForm = (initialState, currentState, onSubmitCallback, validate) => {\r\n  const [fields, setFields] = useState();\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const resetForm = useCallback(() => {\r\n    setFields(initialState);\r\n  }, [initialState]);\r\n\r\n  useEffect(() => {\r\n    if (!Object.keys(errors).length && isSubmitting) {\r\n      onSubmitCallback(fields);\r\n      resetForm();\r\n      setIsSubmitting(false);\r\n    }\r\n  }, [errors, fields, isSubmitting, onSubmitCallback, resetForm]);\r\n\r\n  useEffect(() => {\r\n    setFields(currentState);\r\n  }, [currentState]);\r\n\r\n  const handleChange = useCallback((e, fieldName, fieldValue) => {\r\n    let {value} = e.target;\r\n    const {id, type} = e.target;\r\n\r\n    if (type === 'number') {\r\n      value = Number(value);\r\n    }\r\n    setFields(prevState => ({\r\n      ...prevState,\r\n      [id]: value,\r\n      ...(fieldName && {[fieldName]: fieldValue})\r\n    }));\r\n  }, []);\r\n\r\n  const handleSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      setIsSubmitting(true);\r\n      setErrors(validate(fields));\r\n    },\r\n    [fields, validate]\r\n  );\r\n\r\n  return {\r\n    fields,\r\n    handleChange,\r\n    resetForm,\r\n    handleSubmit,\r\n    errors\r\n  };\r\n};\r\n","import React from 'react';\r\nimport FileBase from 'react-file-base64';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Input({inputId, inputType, inputValue, inputOnChange, inputLabel, error, isRequired, className}) {\r\n  return (\r\n    <div className=\"form-group__container\">\r\n      <div className=\"form-group\">\r\n        {inputType === 'file' ? (\r\n          <>\r\n            <FileBase\r\n              type=\"file\"\r\n              multiple={false}\r\n              onDone={({base64, file}) =>\r\n                inputOnChange('profilePicture', {\r\n                  ...inputValue,\r\n                  url: base64,\r\n                  file: file.name\r\n                })\r\n              }\r\n            />\r\n            <label className=\"label-input-file\" htmlFor={inputId}>\r\n              <span>{inputLabel}</span>\r\n            </label>\r\n            <span className=\"label-input-file__file\">{inputValue.file}</span>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              className={`form-group__input ${className}`}\r\n              id={inputId}\r\n              type={inputType}\r\n              value={inputValue}\r\n              onChange={inputOnChange}\r\n              required={isRequired}\r\n              placeholder=\"placeholder\"\r\n            />\r\n            <label className=\"form-group__label\" htmlFor={inputId}>\r\n              <span className=\"content\">{inputLabel}</span>\r\n            </label>\r\n          </>\r\n        )}\r\n      </div>\r\n      {error && <span className=\"form-group__error\">{error}</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\nInput.propTypes = {\r\n  className: PropTypes.string,\r\n  error: PropTypes.string,\r\n  inputId: PropTypes.string.isRequired,\r\n  inputLabel: PropTypes.string.isRequired,\r\n  inputType: PropTypes.string.isRequired,\r\n  inputValue: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  inputOnChange: PropTypes.func.isRequired,\r\n  isRequired: PropTypes.bool\r\n};\r\n\r\nInput.defaultProps = {\r\n  error: '',\r\n  inputValue: '',\r\n  className: '',\r\n  isRequired: true\r\n};\r\n\r\nexport default Input;\r\n","export default __webpack_public_path__ + \"static/media/logo.0e79731d.png\";","/* eslint-disable prefer-const */\r\nexport default function validateRegisterForm(fields) {\r\n  return {};\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Input from './input';\r\nimport Button from './button';\r\n\r\nfunction LoginForm({handleChange, handleSubmit, fields, errors}) {\r\n  return (\r\n    <form className=\"register-form\" onSubmit={handleSubmit}>\r\n      <fieldset className=\"fieldset\" aria-busy=\"false\">\r\n        <div className=\"form__container\">\r\n          <h1 style={{textAlign: 'center', marginBottom: '2rem'}}>Sign in </h1>\r\n\r\n          <Input\r\n            inputLabel=\"Email\"\r\n            inputOnChange={handleChange}\r\n            inputValue={fields?.email}\r\n            inputType=\"email\"\r\n            inputId=\"email\"\r\n            error={errors.email}\r\n          />\r\n          <Input\r\n            inputLabel=\"Password\"\r\n            inputOnChange={handleChange}\r\n            inputValue={fields?.password}\r\n            inputType=\"password\"\r\n            inputId=\"password\"\r\n            error={errors.password}\r\n          />\r\n\r\n          <div>\r\n            <Button variant=\"contained-secondary\" color=\"secondary\" size=\"lg\" type=\"submit\">\r\n              Login\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n  );\r\n}\r\nLoginForm.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  fields: PropTypes.shape({\r\n    email: PropTypes.string,\r\n    password: PropTypes.string\r\n  }),\r\n  errors: PropTypes.shape({\r\n    email: PropTypes.string,\r\n    password: PropTypes.string\r\n  })\r\n};\r\nLoginForm.defaultProps = {\r\n  errors: {},\r\n  fields: {}\r\n};\r\nexport default LoginForm;\r\n","import {useMutation} from 'react-query';\r\nimport {toast} from 'react-toastify';\r\n\r\nimport {useAuth} from '../../components/auth/use-auth';\r\nimport {useUser} from '../use-user';\r\n\r\nconst useLoginMutation = () => {\r\n  const {signIn} = useAuth();\r\n  const {updateUser} = useUser();\r\n\r\n  return useMutation(loginFields => signIn(loginFields), {\r\n    onSuccess: data => {\r\n      toast.success('Successful login ✅👏');\r\n      updateUser(data);\r\n    },\r\n    onError: error => {\r\n      toast.error(error.response.data.message);\r\n    }\r\n  });\r\n};\r\n\r\nexport default useLoginMutation;\r\n","import React from 'react';\r\n\r\nimport {useForm} from '../../hooks/use-form';\r\nimport EmptyPlaceholder from '../../components/empty-placeholder';\r\nimport Logo from '../../assets/imgs/logo.png';\r\nimport validateRegisterForm from '../../utils/form-rules-register';\r\nimport LoginForm from '../../components/login-form';\r\nimport useLoginMutation from '../../hooks/mutations/use-login-mutation';\r\nimport {emptyMessage} from '../../constants/messages';\r\n\r\nconst emptyState = {\r\n  email: '',\r\n  password: ''\r\n};\r\n\r\nfunction LoginPage() {\r\n  const {mutate: loginHandler} = useLoginMutation();\r\n\r\n  const {fields, handleChange, handleSubmit, errors} = useForm(\r\n    emptyState,\r\n    emptyState,\r\n    loginHandler,\r\n    validateRegisterForm\r\n  );\r\n\r\n  return (\r\n    <div className=\"register-page\">\r\n      <div className=\"register-page__left\">\r\n        <LoginForm fields={fields} errors={errors} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n      </div>\r\n\r\n      <div className=\"register-page__right\">\r\n        <EmptyPlaceholder message={emptyMessage.welcome} image={Logo} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"sourceRoot":""}